# SIMPLE LANGUAGE COMPILER PROJECT

## OVERVIEW

This project implements a complete compiler and runtime for a simple programming language. The compiler transforms source code written in our custom programming language into an executable form through a multi-stage pipeline. The language features a C-like syntax with curly braces, semicolons, and familiar control structures.

The compiler architecture consists of four main components working in sequence:

1. **Lexer (Lexical Analyzer)**: Breaks source code into tokens, identifying keywords, identifiers, operators, literals, and other language elements.

2. **Parser (Syntax Analyzer)**: Takes the token stream and constructs an Abstract Syntax Tree (AST) representing the program's structure according to the language's grammar rules.

3. **Interpreter**: Directly executes the AST by traversing its nodes and performing the operations they represent.

4. **Bytecode Compiler & Virtual Machine**: As an alternative execution model, the bytecode compiler transforms the AST into a more efficient bytecode representation, which is then executed by a stack-based virtual machine.

The project also includes a Streamlit-based web interface that allows users to write, edit, and execute programs in the language, with options to choose between interpretation and bytecode execution.

## KEY FEATURES

### 1. Language Features

- **Variable Declaration and Assignment**: `var x = 10;`, `x = 20;`
- **Data Types**: Integers, floats, strings, and booleans
- **Arithmetic Operations**: Addition, subtraction, multiplication, division
- **Comparison Operators**: Equal, not equal, greater than, less than, etc.
- **Logical Operators**: AND, OR, NOT
- **Control Flow Structures**:
  - If-else statements: `if (condition) { ... } else { ... }`
  - While loops: `while (condition) { ... }`
- **String Interpolation**: `"Hello, ${name}!"`
- **Print Statements**: `print expression;`
- **Block Scoping**: Using curly braces `{ ... }`

### 2. Compiler Components

- **Lexer**:
  - Character-by-character scanning
  - Recognition of language elements (keywords, identifiers, literals)
  - Handling of whitespace and comments
  - Special handling for string interpolation

- **Parser**:
  - Recursive descent parsing technique
  - Grammar rules for all language constructs
  - Proper operator precedence handling
  - Construction of a well-structured AST
  - Comprehensive error reporting

- **Interpreter**:
  - Visitor pattern implementation
  - Direct execution of AST nodes
  - Dynamic variable management
  - Runtime type checking and error handling

- **Bytecode Compiler**:
  - Stack-based instruction design
  - Constant and variable pooling
  - Efficient jump handling for control structures
  - Optimization techniques like constant folding

- **Virtual Machine**:
  - Stack-based execution model
  - Fetch-decode-execute cycle
  - Efficient instruction handling
  - Performance that's 5-10x faster than direct interpretation

### 3. Development and User Tools

- **Streamlit Web Interface**:
  - Code editor with syntax highlighting
  - Example program selection
  - Execution mode selection (interpretation or bytecode)
  - Display of execution results and performance metrics
  - Debugging information (bytecode instructions, variable values)

- **Debugging Features**:
  - Informative error messages
  - Bytecode disassembly
  - Execution tracing options
  - Performance benchmarking

- **Documentation**:
  - Detailed explanations of each compiler component
  - Language grammar specification
  - Example programs demonstrating language features
  - Implementation guides and technical documentation

## TECHNICAL ACHIEVEMENTS

1. **Modular Architecture**: The design separates concerns between lexical analysis, syntax analysis, and execution, allowing each component to be developed and tested independently.

2. **Dual Execution Models**: Implementation of both direct AST interpretation and bytecode compilation provides flexibility and demonstrates the performance benefits of compilation.

3. **String Interpolation**: A complex feature implemented across all compiler phases, showcasing how a modern language feature can be added to the basic framework.

4. **Stack-Based VM**: The virtual machine uses an efficient stack-based design similar to those used in production languages like Python and Java.

5. **Visitor Pattern**: Elegant implementation of the visitor design pattern for traversing and operating on the AST.

## LEARNING OUTCOMES

This project provides practical experience with:

1. **Language Design**: Understanding the trade-offs and decisions in designing a programming language's syntax and semantics.

2. **Compiler Construction**: Learning how to implement each phase of a compiler, from lexical analysis to code generation.

3. **Data Structures**: Using trees, stacks, and other data structures to represent and process code.

4. **Algorithms**: Implementing parsing algorithms, tree traversal, and optimization techniques.

5. **Software Architecture**: Designing a complex system with multiple interacting components.

## CONCLUSION

This compiler project demonstrates a complete implementation of a programming language, from parsing source code to execution. The modular design allows for clear separation of concerns while maintaining cohesive functionality across components.

The dual execution model (interpreter and bytecode VM) effectively illustrates the trade-offs between implementation simplicity and runtime performance. The interpreter provides a clear, direct execution model that closely matches the language semantics, while the bytecode compiler and VM offer significantly better performance for the same language features.

The project serves as both a practical learning tool for understanding how programming languages work and a foundation for further language development. Potential extensions could include adding functions, more complex data structures, a type system, or targeting different execution environments.

Overall, this project successfully implements a small but complete programming language with modern features like string interpolation, demonstrating the fundamental concepts of compiler design and language implementation in a practical, working system. 